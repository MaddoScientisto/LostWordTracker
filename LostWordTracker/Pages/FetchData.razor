@page "/edit"
@using LostWordTracker.Data
@using System.Collections.ObjectModel
@using LostWordTracker.Services
@using System.Text.Json
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject IDataService _dataService

<h1>Edit</h1>

<Button Color="Color.Primary" Clicked="@AddPressed">Add</Button>

<Button Color="Color.Primary" Clicked="@ExportJson">Export JSON</Button>

@if (_characters != null && _characters.Count > 0)
{
    <CardDeck>
        <Repeater Items="_characters" TItem="CharacterDefinition">

            <Card>
                <CardHeader>@context.Id @context.Name</CardHeader>
                <CardBody>
                    <Field>
                        <FieldLabel>Id</FieldLabel>
                        <NumericEdit @bind-Value="@context.Id"></NumericEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Name</FieldLabel>
                        <TextEdit @bind-Text="@context.Name"></TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Obtain Type</FieldLabel>
                        <TextEdit @bind-Text="@context.ObtainType"></TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Universe</FieldLabel>
                        <TextEdit @bind-Text="@context.Universe"></TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Tier</FieldLabel>
                        <TextEdit @bind-Text="@context.Tier"></TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>FarmTier</FieldLabel>
                        <TextEdit @bind-Text="@context.FarmTier"></TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>CqTier</FieldLabel>
                        <TextEdit @bind-Text="@context.CqTier"></TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Tier Rank</FieldLabel>
                        <NumericEdit @bind-Value="@context.TierRank"></NumericEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Portrait</FieldLabel>
                        <TextEdit @bind-Text="@context.Portrait"></TextEdit>
                        <Figure Size="FigureSize.Is16x16">
                            <FigureImage Source="@MakePathString(context.Portrait)" />
                        </Figure>
                    </Field>

                </CardBody>
            </Card>
        </Repeater>
    </CardDeck>
    <Button Color="Color.Primary" Clicked="@AddPressed">Add</Button>

    <Button Color="Color.Primary" Clicked="@ExportJson">Export JSON</Button>

    @if (_characterToAdd != null)
    {
        <Modal @ref="modalRef">
            <ModalContent Centered>
                <ModalHeader>
                    <ModalTitle>Character edit</ModalTitle>
                    <CloseButton />
                </ModalHeader>
                <ModalBody>
                    <Field>
                        <FieldLabel>Id</FieldLabel>
                        <NumericEdit @bind-Value="@_characterToAdd.Id"></NumericEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Search</FieldLabel>
                        <Autocomplete TItem="CharacterDefinition"
                              TValue="string"
                              Data="@_characters"
                              TextField="@((item) => item.Name)"
                              ValueField="@((item) => item.Name)"
                              Filter="AutocompleteFilter.StartsWith"
                              FreeTyping>
                        </Autocomplete>
                    </Field>

                    <Field>
                        <FieldLabel>Name</FieldLabel>
                        <TextEdit @bind-Text="@_characterToAdd.Name" Immediate="false"></TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Obtain Type</FieldLabel>
                        <Select @bind-SelectedValue="@_characterToAdd.ObtainType">
                            <SelectItem Value="string.Empty"></SelectItem>
                            <SelectItem Value="@("Pray")">Pray</SelectItem>
                            <SelectItem Value="@("Fes")">Fes</SelectItem>
                            <SelectItem Value="@("Sfes")">Sfes</SelectItem>


                        </Select>
                        <TextEdit @bind-Text="@_characterToAdd.ObtainType"></TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Universe</FieldLabel>
                        <Select @bind-SelectedValue="@_characterToAdd.Universe">
                            <SelectItem Value="string.Empty"></SelectItem>
                            <SelectItem Value="@("L1")">L1</SelectItem>
                            <SelectItem Value="@("A6")">A6</SelectItem>
                            <SelectItem Value="@("A7")">A7</SelectItem>
                            <SelectItem Value="@("A8")">A8</SelectItem>
                            <SelectItem Value="@("A9")">A9</SelectItem>
                            <SelectItem Value="@("A10")">A10</SelectItem>
                            <SelectItem Value="@("A11")">A11</SelectItem>
                            <SelectItem Value="@("A12")">A12</SelectItem>
                            <SelectItem Value="@("B2")">B2</SelectItem>
                            <SelectItem Value="@("B3")">B3</SelectItem>
                            <SelectItem Value="@("R2")">R2</SelectItem>
                            <SelectItem Value="@("R8")">R8</SelectItem>
                            <SelectItem Value="@("Z1")">Z1</SelectItem>
                        </Select>
                        <TextEdit @bind-Text="@_characterToAdd.Universe"></TextEdit>
                    </Field>

                    <Field>
                        <FieldLabel>FarmTier</FieldLabel>
                        <Select @bind-SelectedValue="@_characterToAdd.FarmTier">
                            <SelectItem Value="string.Empty"></SelectItem>
                            <SelectItem Value="@("EX")">EX</SelectItem>
                            <SelectItem Value="@("S+")">S+</SelectItem>
                            <SelectItem Value="@("S")">S</SelectItem>
                            <SelectItem Value="@("A+")">A+</SelectItem>
                            <SelectItem Value="@("A")">A</SelectItem>
                            <SelectItem Value="@("B+")">B+</SelectItem>
                            <SelectItem Value="@("B")">B</SelectItem>
                            <SelectItem Value="@("B-")">B</SelectItem>
                            <SelectItem Value="@("C+")">C+</SelectItem>
                            <SelectItem Value="@("C")">C</SelectItem>
                            <SelectItem Value="@("C-")">C-</SelectItem>
                            <SelectItem Value="@("D")">D</SelectItem>
                            <SelectItem Value="@("E")">E</SelectItem>
                        </Select>
                        <TextEdit @bind-Text="@_characterToAdd.FarmTier"></TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>CqTier</FieldLabel>
                        <Select @bind-SelectedValue="@_characterToAdd.CqTier">
                            <SelectItem Value="string.Empty"></SelectItem>
                            <SelectItem Value="@("EX")">EX</SelectItem>
                            <SelectItem Value="@("S+")">S+</SelectItem>
                            <SelectItem Value="@("S")">S</SelectItem>
                            <SelectItem Value="@("A+")">A+</SelectItem>
                            <SelectItem Value="@("A")">A</SelectItem>
                            <SelectItem Value="@("B+")">B+</SelectItem>
                            <SelectItem Value="@("B")">B</SelectItem>
                            <SelectItem Value="@("B-")">B</SelectItem>
                            <SelectItem Value="@("C+")">C+</SelectItem>
                            <SelectItem Value="@("C")">C</SelectItem>
                            <SelectItem Value="@("C-")">C-</SelectItem>
                            <SelectItem Value="@("D")">D</SelectItem>
                            <SelectItem Value="@("E")">E</SelectItem>
                        </Select>
                        <TextEdit @bind-Text="@_characterToAdd.CqTier"></TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Tier</FieldLabel>
                        <Select @bind-SelectedValue="@_characterToAdd.Tier">
                            <SelectItem Value="string.Empty"></SelectItem>
                            <SelectItem Value="@("EX")">EX</SelectItem>
                            <SelectItem Value="@("S+")">S+</SelectItem>
                            <SelectItem Value="@("S")">S</SelectItem>
                            <SelectItem Value="@("A+")">A+</SelectItem>
                            <SelectItem Value="@("A")">A</SelectItem>
                            <SelectItem Value="@("B+")">B+</SelectItem>
                            <SelectItem Value="@("B")">B</SelectItem>
                            <SelectItem Value="@("B-")">B</SelectItem>
                            <SelectItem Value="@("C+")">C+</SelectItem>
                            <SelectItem Value="@("C")">C</SelectItem>
                            <SelectItem Value="@("C-")">C-</SelectItem>
                            <SelectItem Value="@("D")">D</SelectItem>
                            <SelectItem Value="@("E")">E</SelectItem>
                        </Select>
                        <TextEdit @bind-Text="@_characterToAdd.Tier"></TextEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Tier Rank</FieldLabel>
                        <NumericEdit @bind-Value="@_characterToAdd.TierRank"></NumericEdit>
                    </Field>
                    <Field>
                        <FieldLabel>Portrait</FieldLabel>
                        <TextEdit @bind-Text="@_characterToAdd.Portrait"></TextEdit>
                    </Field>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                    <Button Color="Color.Primary" Clicked="@SaveNewChar">Save Changes</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    }


    <Modal @ref="jsonModalRef">
        <ModalContent Centered>
            <ModalHeader>
                <ModalTitle>JSON Export</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>

                <Field>
                    <FieldLabel>JSON</FieldLabel>
                    <MemoEdit @bind-Text="@_jsonToExport" AutoSize></MemoEdit>
                </Field>

            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideJsonModal">Close</Button>

            </ModalFooter>
        </ModalContent>
    </Modal>


}



@code {
    private Modal modalRef;
    private Modal jsonModalRef;
    //private CharacterDefinitions _characterDefinitions;

    private ObservableCollection<CharacterDefinition> _characters { get; set; } = new();

    private CharacterDefinition _characterToAdd;

    private string _jsonToExport = "";
    protected override async Task OnInitializedAsync()
    {

        var characterDefinitions = await _dataService.GetCharactersData();
        _characters = new(characterDefinitions.Characters.Values.ToArray());
        MakeNewCharacter();
    }

    private string MakePathString(string value)
    {
        return $"images/portraits/{value}";
    }

    private void MakeNewCharacter()
    {
        _characterToAdd = new CharacterDefinition()
            {
                Id = _characters.Count() + 1,
                TierRank = 1
            };
    }

    private async Task AddPressed()
    {
        MakeNewCharacter();
        await modalRef.Show();
    }

    private async Task HideModal()
    {
        await modalRef.Hide();
    }

    private async Task SaveNewChar()
    {
        // TODO Save

        _characters.Add(_characterToAdd);

        await modalRef.Hide();
    }

    private async Task ExportJson()
    {
        var dic = _characters.ToDictionary(x => x.Id);

        var objectToConvert = new
        {
            Characters = dic
        };

        _jsonToExport = JsonSerializer.Serialize(objectToConvert, new JsonSerializerOptions { WriteIndented = true });

        await jsonModalRef.Show();
    }

    private async Task HideJsonModal()
    {
        await jsonModalRef.Hide();
    }
}