@page "/"
@using LostWordTracker.Data
@using System.Collections.ObjectModel
@using LostWordTracker.Services
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject IDataService _dataService

<CardDeck>
    <Card>
        <CardHeader>Save/Load to Local Storage</CardHeader>
        <CardBody>
            <Button Clicked="@Save" Color="Color.Primary">Save</Button>
            <Button Clicked="@Load" Color="Color.Secondary">Load</Button>
        </CardBody>
    </Card>
    <Card>
        <CardHeader>Import/Export string</CardHeader>
        <CardBody>
            <TextEdit Size="Size.Large" @bind-Text="@_importData" />
        </CardBody>
        <CardFooter>
            <Button Clicked="@Import" Color="Color.Primary">Import</Button>
            <Button Clicked="@Export" Color="Color.Secondary">Export</Button>
        </CardFooter>
    </Card>
</CardDeck>
<Switch TValue="bool" @bind-Checked="@_showOnlyObtained">Show only obtained</Switch>


@if (_characterDefinitions != null)
{
    <div class="characterContainer">

        <Repeater Items="_characterDefinitions.CharacterStorage" TItem="CharacterStorage">
            @{
                var currentCharData = _characterDefinitions.Characters[context.Id];
            }
            <div class="@((ShouldShow(context, currentCharData) ? "character" : "hide" ))">
                @if(currentCharData.HasRebirth && context.Rebirth)
                {
                    <img class="portrait" src="@MakePathString(currentCharData.RebirthPortrait)" @onclick="@(e => ImageClicked(currentCharData, context))" />
                }
                else
                {
                    <img class="portrait" src="@MakePathString(currentCharData.Portrait)" @onclick="@(e => ImageClicked(currentCharData, context))" />
                }
                
                <div class="characterName">@currentCharData.Name</div>
                <Badge Color="Color.Light">@currentCharData.Universe</Badge>
                @switch (@currentCharData.Tier)
                {
                    case "EX":
                        <Badge Color="Color.Warning">EX</Badge>
                        break;
                    case "S+":
                        <Badge Color="Color.Success">S+</Badge>
                        break;
                    case "S":
                        <Badge Color="Color.Info">S</Badge>
                        break;
                    case "A+":
                        <Badge Color="Color.Primary">A+</Badge>
                        break;
                    case "A":
                        <Badge Color="Color.Dark">A</Badge>
                        break;
                    case "B":
                        <Badge Color="Color.Secondary">B</Badge>
                        break;
                    case "C":
                        <Badge Color="Color.Light">C</Badge>
                        break;
                    case "D":
                        <Badge Color="Color.Danger">D</Badge>
                        break;
                }
                @*<Check @bind-Checked="@context.Obtained">Obtained</Check>*@

                @switch(@currentCharData.ObtainType)
                {
                    case "Pray":

                        break;
                        case "Fes":
                        <Badge Color="Color.Warning">FES</Badge>
                        break;
                        case "Sfes":
                        <Badge Color="Color.Info">SFES</Badge>
                        break;
                }

                <div class="characterData1">
                    LB
                    <Rating Color="Color.Primary" @bind-SelectedValue="@context.LimitBreak" MaxValue="5"></Rating>
                </div>
                <div class="characterData1">
                    AW
                    <Rating Color="Color.Secondary" @bind-SelectedValue="@context.Awakening" MaxValue="5"></Rating>
                </div>
            </div>


        </Repeater>
    </div>
}

@*@if (modalCharacterDefinition != null && modalCharacterStorage != null)
{*@
<Modal @ref="_characterModalRef">
    @if (modalCharacterDefinition != null && modalCharacterStorage != null)
    {
        <ModalContent Centered>
            <ModalHeader><ModalTitle>@modalCharacterDefinition.Name</ModalTitle>  <CloseButton></CloseButton></ModalHeader>
            <ModalBody>
                <Button Color="Color.Primary" Clicked="(e => MaxCharacter(modalCharacterStorage))">Max All</Button>
                @if (modalCharacterDefinition.HasRebirth)
                {
                       <Field>
                    <FieldLabel>Rebirth</FieldLabel>
                    <Switch @bind-Checked="@modalCharacterStorage.Rebirth"></Switch>
                </Field>
                }             
                <Field>
                    <FieldLabel>Rank</FieldLabel>
                    <NumericEdit @bind-Value="@modalCharacterStorage.Rank"></NumericEdit>
                </Field>
                <Field>
                    <FieldLabel>Level</FieldLabel>
                    <NumericEdit @bind-Value="@modalCharacterStorage.Level"></NumericEdit>
                </Field>
                <Field>
                    <FieldLabel>Skill 1 Level</FieldLabel>
                    <NumericEdit @bind-Value="@modalCharacterStorage.Skill1"></NumericEdit>
                </Field>
                <Field>
                    <FieldLabel>Skill 2 Level</FieldLabel>
                    <NumericEdit @bind-Value="@modalCharacterStorage.Skill2"></NumericEdit>
                </Field>
                <Field>
                    <FieldLabel>Skill 3 Level</FieldLabel>
                    <NumericEdit @bind-Value="@modalCharacterStorage.Skill3"></NumericEdit>
                </Field>
            </ModalBody>
        </ModalContent>
    }
</Modal>
@*}*@

<SnackbarStack @ref="snackbarStack" Location="SnackbarStackLocation.End" />

@code {
    [Inject] INotificationService NotificationService { get; set; }
    SnackbarStack snackbarStack;
    double intervalBeforeMsgClose = 2000;
    private Modal _characterModalRef;

    private bool ShouldShow(CharacterStorage context, CharacterDefinition currentCharData)
    {
        if (!currentCharData.Enabled) return false;
        if (_showOnlyObtained && context.LimitBreak == 0) return false;

        return true;
    }

    private string MakePathString(string value)
    {
        return $"images/portraits/{value}";
    }

    private CharacterDefinitions _characterDefinitions;
    //private ObservableCollection<Character> _characters { get; set; }

    private string _importData = "";

    private bool _showOnlyObtained = false;

    protected override async Task OnInitializedAsync()
    {
        //_characterDefinitions = await _dataService.GetCharactersData();
        await Load();
    }


    private void Mark(CharacterStorage character)
    {
        character.Obtained = true;
    }

    private async Task Save()
    {
        await _dataService.SaveData(_characterDefinitions);
        await NotificationService.Success("Data saved");
        await snackbarStack.PushAsync("Data saved", SnackbarColor.Success);
        //await _localStorage.SetItemAsync<CharacterData>("CharacterData", characters);
    }

    private async Task Load()
    {
        _characterDefinitions = await _dataService.LoadData();
        await NotificationService.Success("Data loaded");
        await snackbarStack.PushAsync("Data loaded", SnackbarColor.Success);
        //var data = await _localStorage.GetItemAsync<CharacterData>("CharacterData");
    }

    private async Task Import()
    {
        _characterDefinitions = await _dataService.ImportCompressed(_importData);
        await NotificationService.Success("Data imported");
        await snackbarStack.PushAsync("Data imported", SnackbarColor.Success);
    }

    private async Task Export()
    {
        _importData = _dataService.ExportCompressed(_characterDefinitions);
        await NotificationService.Success("Data exported");
        await snackbarStack.PushAsync("Data exported", SnackbarColor.Success);
    }

    private async Task ToggleView()
    {
        _showOnlyObtained = !_showOnlyObtained;
    }

    CharacterDefinition modalCharacterDefinition;
    CharacterStorage modalCharacterStorage;

    private async Task ImageClicked(CharacterDefinition characterDefinition, CharacterStorage characterStorage)
    {
        modalCharacterDefinition = characterDefinition;
        modalCharacterStorage = characterStorage;
        await _characterModalRef.Show();
    }

    private async Task MaxCharacter(CharacterStorage character)
    {
        character.Level = 100;
        character.Rank = 5;
        character.Skill1 = 10;
        character.Skill2 = 10;
        character.Skill3 = 10;
        
    }
}