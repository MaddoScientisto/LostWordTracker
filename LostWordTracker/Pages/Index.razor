@page "/"
@using LostWordTracker.Data
@using System.Collections.ObjectModel
@using LostWordTracker.Services
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject IDataService _dataService


<Card>
    <CardHeader>Save/Load to Local Storage</CardHeader>
    <CardBody>
        <Button Clicked="@Save" Color="Color.Primary">Save</Button>
        <Button Clicked="@Load" Color="Color.Secondary">Load</Button>
    </CardBody>
</Card>
<Card>
    <CardHeader>Import/Export string</CardHeader>
    <CardBody>
        <TextEdit Size="Size.Large" @bind-Text="@_importData" />
    </CardBody>
    <CardFooter>
        <Button Clicked="@Import" Color="Color.Primary">Import</Button>
        <Button Clicked="@Export" Color="Color.Secondary">Export</Button>
    </CardFooter>
</Card>

<Switch TValue="bool" @bind-Checked="@_showOnlyObtained">Show only obtained</Switch>


    @if (_characterDefinitions != null)
    {
        <div class="characterContainer">

        <Repeater Items="_characterDefinitions.CharacterStorage" TItem="CharacterStorage">
            @{
                var currentCharData = _characterDefinitions.Characters[context.Id];
            }
            <div class="@((_showOnlyObtained ? context.Obtained ? "character" : "hide" : "character"))">
                
                <img class="portrait" src="@MakePathString(currentCharData.Portrait)" />
                <div class="characterName">@currentCharData.Name</div>
                <Badge>@currentCharData.Universe</Badge>
                @switch (@currentCharData.Tier)
                        {
                            case "EX":
                                <Badge Color="Color.Warning">EX</Badge>
                                break;
                            case "S+":
                                <Badge Color="Color.Success">S+</Badge>
                                break;
                            case "S":
                                <Badge Color="Color.Info">S</Badge>
                                break;
                            case "A+":
                                <Badge Color="Color.Primary">A+</Badge>
                                break;
                            case "A":
                                <Badge Color="Color.Dark">A</Badge>
                                break;
                            case "B":
                                <Badge Color="Color.Secondary">B</Badge>
                                break;
                            case "C":
                                <Badge Color="Color.Light">C</Badge>
                                break;
                            case "D":
                                <Badge Color="Color.Danger">D</Badge>
                                break;
                        }
                  <Check @bind-Checked="@context.Obtained">Obtained</Check>
                  <div class="characterData1">
                    <Rating Color="Color.Primary" @bind-SelectedValue="@context.LimitBreak" MaxValue="5"></Rating>
                  </div>
            </div>
            
            
        </Repeater>
        </div>
    }




@code {

    private string MakePathString(string value)
    {
        return $"images/portraits/{value}";
    }

    private CharacterDefinitions _characterDefinitions;
    //private ObservableCollection<Character> _characters { get; set; }

    private string _importData = "";

    private bool _showOnlyObtained = false;

    protected override async Task OnInitializedAsync()
    {
        _characterDefinitions = await _dataService.GetCharactersData();
    }


    public void Mark(CharacterStorage character)
    {
        character.Obtained = true;
    }

    public async Task Save()
    {
        await _dataService.SaveData(_characterDefinitions);
        //await _localStorage.SetItemAsync<CharacterData>("CharacterData", characters);
    }

    public async Task Load()
    {
        _characterDefinitions = await _dataService.LoadData();
        //var data = await _localStorage.GetItemAsync<CharacterData>("CharacterData");
    }

    public async Task Import()
    {
        _characterDefinitions = await _dataService.Import(_importData);
    }

    public async Task Export()
    {
        _importData = _dataService.Export(_characterDefinitions);
    }

    public async Task ToggleView()
    {
        _showOnlyObtained = !_showOnlyObtained;
    }
}